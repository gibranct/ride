// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com.br/gibranct/ride/internal/ride/application/usecase"
	"github.com.br/gibranct/ride/internal/ride/infra/database"
	"github.com.br/gibranct/ride/internal/ride/infra/gateway"
	"github.com.br/gibranct/ride/internal/ride/infra/queue"
	"github.com.br/gibranct/ride/internal/ride/infra/repository"
	"github.com/google/wire"
)

// Injectors from wire.go:

func NewRequestRide() *usecase.RequestRide {
	accountGateway := gateway.NewAccountGateway()
	postgresAdapter := database.NewPostgresAdapter()
	rideRepositoryDatabase := repository.NewRideRepository(postgresAdapter)
	requestRide := usecase.NewRequestRideUseCase(accountGateway, rideRepositoryDatabase)
	return requestRide
}

func NewGetRide() *usecase.GetRide {
	postgresAdapter := database.NewPostgresAdapter()
	rideRepositoryDatabase := repository.NewRideRepository(postgresAdapter)
	positionRepositoryDatabase := repository.NewPositionRepository(postgresAdapter)
	getRide := usecase.NewGetRideUseCase(rideRepositoryDatabase, positionRepositoryDatabase)
	return getRide
}

func NewAcceptRide() *usecase.AcceptRide {
	accountGateway := gateway.NewAccountGateway()
	postgresAdapter := database.NewPostgresAdapter()
	rideRepositoryDatabase := repository.NewRideRepository(postgresAdapter)
	acceptRide := usecase.NewAcceptRideUseCase(accountGateway, rideRepositoryDatabase)
	return acceptRide
}

func NewStartRide() *usecase.StartRide {
	postgresAdapter := database.NewPostgresAdapter()
	rideRepositoryDatabase := repository.NewRideRepository(postgresAdapter)
	startRide := usecase.NewStartRideUseCase(rideRepositoryDatabase)
	return startRide
}

func NewUpdatePosition() *usecase.UpdatePosition {
	postgresAdapter := database.NewPostgresAdapter()
	rideRepositoryDatabase := repository.NewRideRepository(postgresAdapter)
	positionRepositoryDatabase := repository.NewPositionRepository(postgresAdapter)
	updatePosition := usecase.NewUpdatePositionUseCase(rideRepositoryDatabase, positionRepositoryDatabase)
	return updatePosition
}

func NewFinishRide() *usecase.FinishRide {
	postgresAdapter := database.NewPostgresAdapter()
	rideRepositoryDatabase := repository.NewRideRepository(postgresAdapter)
	positionRepositoryDatabase := repository.NewPositionRepository(postgresAdapter)
	queueQueue := queue.NewRabbitMQAdapter()
	finishRide := usecase.NewFinishRideUseCase(rideRepositoryDatabase, positionRepositoryDatabase, queueQueue)
	return finishRide
}

// wire.go:

var databaseSet = wire.NewSet(database.NewPostgresAdapter, wire.Bind(new(database.DatabaseConnection), new(*database.PostgresAdapter)))

var allReposSet = wire.NewSet(gateway.NewAccountGateway, repository.NewRideRepository, wire.Bind(new(repository.RideRepository), new(*repository.RideRepositoryDatabase)), database.NewPostgresAdapter, wire.Bind(new(database.DatabaseConnection), new(*database.PostgresAdapter)))

var rideSet = wire.NewSet(repository.NewRideRepository, wire.Bind(new(repository.RideRepository), new(*repository.RideRepositoryDatabase)))

var positionRepoSet = wire.NewSet(repository.NewPositionRepository, wire.Bind(new(repository.PositionRepository), new(*repository.PositionRepositoryDatabase)))
